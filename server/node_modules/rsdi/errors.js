"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FactoryDefinitionError = exports.MethodIsMissingError = exports.InvalidConstructorError = exports.DependencyIsMissingError = exports.CircularDependencyError = void 0;
var CircularDependencyError = /** @class */ (function (_super) {
    __extends(CircularDependencyError, _super);
    function CircularDependencyError(name, path) {
        return _super.call(this, "Circular Dependency is detected. Dependency: \"" + name + "\", path: " +
            path.join(" -> ") +
            ".") || this;
    }
    return CircularDependencyError;
}(Error));
exports.CircularDependencyError = CircularDependencyError;
var DependencyIsMissingError = /** @class */ (function (_super) {
    __extends(DependencyIsMissingError, _super);
    function DependencyIsMissingError(name) {
        return _super.call(this, "Dependency with name " + name + " is not defined") || this;
    }
    return DependencyIsMissingError;
}(Error));
exports.DependencyIsMissingError = DependencyIsMissingError;
var InvalidConstructorError = /** @class */ (function (_super) {
    __extends(InvalidConstructorError, _super);
    function InvalidConstructorError() {
        return _super.call(this, "Invalid constructor have been provided") || this;
    }
    return InvalidConstructorError;
}(Error));
exports.InvalidConstructorError = InvalidConstructorError;
var MethodIsMissingError = /** @class */ (function (_super) {
    __extends(MethodIsMissingError, _super);
    function MethodIsMissingError(objectName, methodName) {
        return _super.call(this, methodName + " is not a member of " + objectName) || this;
    }
    return MethodIsMissingError;
}(Error));
exports.MethodIsMissingError = MethodIsMissingError;
var FactoryDefinitionError = /** @class */ (function (_super) {
    __extends(FactoryDefinitionError, _super);
    function FactoryDefinitionError() {
        return _super.call(this, "Factory must be a function") || this;
    }
    return FactoryDefinitionError;
}(Error));
exports.FactoryDefinitionError = FactoryDefinitionError;
//# sourceMappingURL=errors.js.map