"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseDefinition_1 = __importDefault(require("../definitions/BaseDefinition"));
var errors_1 = require("../errors");
/**
 * Definition to create object by provided class name
 */
var ObjectDefinition = /** @class */ (function (_super) {
    __extends(ObjectDefinition, _super);
    function ObjectDefinition(constructorFunction) {
        var _this = _super.call(this) || this;
        _this.deps = [];
        _this.methods = [];
        _this.resolve = function (diContainer, parentDeps) {
            var _a;
            if (parentDeps === void 0) { parentDeps = []; }
            var deps = _this.deps.map(function (dep) {
                if (dep instanceof BaseDefinition_1.default) {
                    return dep.resolve(diContainer, parentDeps);
                }
                return dep;
            });
            var object = new ((_a = _this.constructorFunction).bind.apply(_a, __spreadArray([void 0], deps)))();
            _this.methods.forEach(function (method) {
                var methodName = method.methodName, args = method.args;
                if (object[methodName] === undefined) {
                    throw new errors_1.MethodIsMissingError(object.constructor.name, methodName);
                }
                var resolvedArgs = args.map(function (arg) {
                    if (arg instanceof BaseDefinition_1.default) {
                        return arg.resolve(diContainer);
                    }
                    return arg;
                });
                object[methodName].apply(object, resolvedArgs);
            });
            return object;
        };
        if (typeof constructorFunction !== "function") {
            throw new errors_1.InvalidConstructorError();
        }
        _this.constructorFunction = constructorFunction;
        return _this;
    }
    ObjectDefinition.prototype.construct = function () {
        var deps = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            deps[_i] = arguments[_i];
        }
        this.deps = deps;
        return this;
    };
    ObjectDefinition.prototype.method = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.methods.push({
            methodName: methodName,
            args: args,
        });
        return this;
    };
    return ObjectDefinition;
}(BaseDefinition_1.default));
exports.default = ObjectDefinition;
//# sourceMappingURL=ObjectDefinition.js.map